---

- name: Gather facts from new server
  setup:
    filter: ansible_hostname

- name: Remove goland package due to bug with login
  become: true
  apt:
    name: golang-docker-credential-helpers
    state: absent

- name: Install JQ
  become: true
  apt:
    name: jq
    state: present


- local_action: shell {{ role_path }}/files/vault_pas_matomo.sh
  register: script_output
  
- name: set_fact for vault
  set_fact: 
       fact_name: script_output.stdout

- name: Setup directory and permissions for content folder
  become: true
  file:
      path: /etc/docker/db/dump
      owner: root
      group: docker
      mode: 0755
      state: directory

- name: Copy database file into place for initial load. 
  become: true
  copy:
    src: ../hub-containers/db/dump/hub.sql
    dest: /etc/docker/db/dump/hub.sql
    owner: root
    group: docker
    mode: u=rw,g=r,o=r


- name: Copy letsencrypt script
  become: true
  copy:
    src: ../docker/files/nginx/generate-dummy-certs.sh # this can be tempalted if needed at a later date using j2
    dest: /etc/docker/generate-dummy-certs.sh
    owner: root
    group: docker
    mode: u=rw,g=r,o=r
  when: "'stage' not in group_names"



- name: Nginx config copy
  become: true
  copy:
    src: "{{ private_rsa }}"
    dest: /etc/nginx/san.digital-hub.rsa
    owner: root
    group: docker
    mode: u=rw,g=r,o=r
  when: "'stage' not in group_names"


- name: Nginx config copy and template
  become: true
  template:
    src: "{{ nginx_conf }}"
    dest: /etc/nginx/nginx.conf
    owner: root
    group: docker
    mode: u=rw,g=r,o=r


- name: Copy and template the docker-compose-override file
  become: true
  template:
    src: ../docker/files/docker-compose-override.yml.j2
    dest: /etc/docker/docker-compose-override.yml
    owner: root
    group: docker
    mode: u=rw,g=r,o=r

   
- name: Copy docker-compose with owner and permission, using symbolic representation
  become: true
  copy:
    src: ../docker/files/docker-compose.yml
    dest: /etc/docker/docker-compose.yml
    owner: root
    group: docker
    mode: u=rw,g=r,o=r

- name: generate some local secrets
  become: true
  shell: |
    tr -d -c "a-zA-Z0-9" < /dev/urandom | head -c 20 \
      > /etc/docker-decomposed-secrets-{{ item }}
  args:
    creates: /etc/docker-decomposed-secrets-{{ item }}
  with_items:
    - MYSQL_ROOT_PASSWORD
    - MYSQL_PASSWORD
    - HUB_MATOMO_MYSQL_ROOT_PASSWORD
    - HUB_MATOMO_MYSQL_USER_USERNAME
    - HUB_MATOMO_MYSQL_USER_PASSWORD

- name: keep secrets relatively secret
  become: true
  file:
    path: /etc/docker-decomposed-secrets-{{ item }}
    owner: root
    group: docker
    mode: 0400
  with_items:
    - MYSQL_ROOT_PASSWORD
    - MYSQL_PASSWORD
    - HUB_MATOMO_MYSQL_ROOT_PASSWORD
    - HUB_MATOMO_MYSQL_USER_USERNAME
    - HUB_MATOMO_MYSQL_USER_PASSWORD

- name: setup secrets file for decomposed
  become: true
  copy:
    content: |
      #!/bin/bash
      IMAGE_VERSION=latest
      while getopts "v:" opt
      do
          case "$opt" in
              v ) IMAGE_VERSION=$OPTARG ;;
            esac
          done
      export IMAGE_VERSION
      export MYSQL_USER=hubdb_user
      export MYSQL_ROOT_PASSWORD=$(cat /etc/docker-decomposed-secrets-MYSQL_ROOT_PASSWORD)
      export MYSQL_PASSWORD=$(cat /etc/docker-decomposed-secrets-MYSQL_PASSWORD)
      export HUB_MATOMO_MYSQL_ROOT_PASSWORD=$(cat /etc/docker-decomposed-secrets-HUB_MATOMO_MYSQL_ROOT_PASSWORD)
      export HUB_MATOMO_MYSQL_USER_USERNAME=$(cat /etc/docker-decomposed-secrets-HUB_MATOMO_MYSQL_USER_USERNAME)
      export HUB_MATOMO_MYSQL_USER_PASSWORD=$(cat /etc/docker-decomposed-secrets-HUB_MATOMO_MYSQL_USER_PASSWORD)
      export PIWIK_URI=//{{ pikwik_url }}
      export DRUPAL_URL=https://{{ hub_backend_host }}
      export MATOMO_URL=//{{ matomo_url }}
      export APP_NAME="{{ app_name }}"
      export ACR_PASSWORD={{ script_output.stdout }}
      HOSTNAME=$(hostname)
      echo "$HOSTNAME"
      if [[ $HOSTNAME == *prod* ]]; then
           KEY="nomis-prod-api-key"
           PHONE_SERVER="PHONE-SERVER-PROD"
           PHONE_PORT="PHONE-PORT-PROD"
           PHONE_PASSPHRASE="PHONE-PASSPHRASE-PROD"
           PHONE_ITERATIONS="PHONE-ITERATIONS-PROD"
           PHONE_SALT="PHONE-SALT-PROD"
           PHONE_IV="PHONE-IV-PROD"
           LDAP_URL="LDAP-URL-PROD"
           LDAP_ADMIN_DN="LDAP-ADMIN-DN-PROD"
           LDAP_ADMIN_PWD="LDAP-ADMIN-PWD-PROD"
           LDAP_USER_SEARCH_BASE="LDAP-USER-SEARCH-BASE-PROD"
      else
           KEY="nomis-staging-api-key"
           PHONE_SERVER="PHONE-SERVER-DEV"
           PHONE_PORT="PHONE-PORT-DEV"
           PHONE_PASSPHRASE="PHONE-PASSPHRASE-DEV"
           PHONE_ITERATIONS="PHONE-ITERATIONS-DEV"
           PHONE_SALT="PHONE-SALT-DEV"
           PHONE_IV="PHONE-IV-DEV"
           LDAP_URL="LDAP-URL-DEV"
           LDAP_ADMIN_DN="LDAP-ADMIN-DN-DEV"
           LDAP_ADMIN_PWD="LDAP-ADMIN-PWD-DEV"
           LDAP_USER_SEARCH_BASE="LDAP-USER-SEARCH-BASE-DE"
      fi
      export AZURE_AUTH_TOKEN="$(curl 'http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https%3A%2F%2Fvault.azure.net' -H Metadata:true 2>/dev/null | jq -r '.access_token')"
      export NOMIS_API_KEY="$(curl https://pfs-hub-prod-hub-kv.vault.azure.net/secrets/$KEY/?api-version=2016-10-01 -H "Authorization: Bearer $AZURE_AUTH_TOKEN" 2>/dev/null | jq -r '.value')"
      export PHONE_SERVER="$(curl https://pfs-hub-prod-hub-kv.vault.azure.net/secrets/$PHONE_SERVER/?api-version=2016-10-01 -H "Authorization: Bearer $AZURE_AUTH_TOKEN" 2>/dev/null | jq -r '.value')"
      export PHONE_PORT="$(curl https://pfs-hub-prod-hub-kv.vault.azure.net/secrets/$PHONE_PORT/?api-version=2016-10-01 -H "Authorization: Bearer $AZURE_AUTH_TOKEN" 2>/dev/null | jq -r '.value')"
      export PHONE_PASSPHRASE="$(curl https://pfs-hub-prod-hub-kv.vault.azure.net/secrets/$PHONE_PASSPHRASE/?api-version=2016-10-01 -H "Authorization: Bearer $AZURE_AUTH_TOKEN" 2>/dev/null | jq -r '.value')" 
      export PHONE_ITERATIONS="$(curl https://pfs-hub-prod-hub-kv.vault.azure.net/secrets/$PHONE_ITERATIONS/?api-version=2016-10-01 -H "Authorization: Bearer $AZURE_AUTH_TOKEN" 2>/dev/null | jq -r '.value')" 
      export PHONE_SALT="$(curl https://pfs-hub-prod-hub-kv.vault.azure.net/secrets/$PHONE_SALT/?api-version=2016-10-01 -H "Authorization: Bearer $AZURE_AUTH_TOKEN" 2>/dev/null | jq -r '.value')" 
      export PHONE_IV="$(curl https://pfs-hub-prod-hub-kv.vault.azure.net/secrets/$PHONE_IV/?api-version=2016-10-01 -H "Authorization: Bearer $AZURE_AUTH_TOKEN" 2>/dev/null | jq -r '.value')" 
      export LDAP_URL="$(curl https://pfs-hub-prod-hub-kv.vault.azure.net/secrets/$LDAP_URL/?api-version=2016-10-01 -H "Authorization: Bearer $AZURE_AUTH_TOKEN" 2>/dev/null | jq -r '.value')" 
      export LDAP_ADMIN_DN="$(curl https://pfs-hub-prod-hub-kv.vault.azure.net/secrets/$LDAP_ADMIN_DN/?api-version=2016-10-01 -H "Authorization: Bearer $AZURE_AUTH_TOKEN" 2>/dev/null | jq -r '.value')" 
      export LDAP_ADMIN_PWD="$(curl https://pfs-hub-prod-hub-kv.vault.azure.net/secrets/$LDAP_ADMIN_PWD/?api-version=2016-10-01 -H "Authorization: Bearer $AZURE_AUTH_TOKEN" 2>/dev/null | jq -r '.value')" 
      export LDAP_USER_SEARCH_BASE="$(curl https://pfs-hub-prod-hub-kv.vault.azure.net/secrets/$LDAP_USER_SEARCH_BASE/?api-version=2016-10-01 -H "Authorization: Bearer $AZURE_AUTH_TOKEN" 2>/dev/null | jq -r '.value')" 
      echo "$ACR_PASSWORD" | docker login --username pfsprodhubacr --password-stdin pfsprodhubacr.azurecr.io
      docker pull mojdigitalstudio/digital-hub-node:$IMAGE_VERSION
      docker-compose pull
      docker-compose -f /etc/docker/docker-compose.yml -f /etc/docker/docker-compose-override.yml up -d
    dest: /etc/docker-decomposed-secrets.sh
    mode: 0770
    owner: root
    group: docker
  
- name: Check docker status
  become: True
  command: docker ps -a
  register: dockerstatus

- name: Print status
  debug:
    msg: "docker status: {{ dockerstatus.stdout }}"
- name: install docker-py to allow ansible to docker
  become: true
  apt:
    name: python-docker

- name: get latest root ca and deploy it
  become: true
  copy:
    content: |
      #!/bin/bash
      #sample value for your variables
      AZURE_AUTH_TOKEN="$(curl 'http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https%3A%2F%2Fvault.azure.net' -H Metadata:true 2>/dev/null | jq -r '.access_token')"
      ROOT-CA="$(curl 'https://pfs-hub-prod-hub-kv.vault.azure.net/secrets/root-ca-dev-cert/?api-version=2016-10-01' -H "Authorization: Bearer $AZURE_AUTH_TOKEN" 2>/dev/null | jq -r '.value')"
      echo "$SLACK_WEBHOOK"
      # read the yml template from a file and substitute the string
      # MYVARNAME with the value of the MYVARVALUE variable

      sed -i -e "s|slackwebhook|$SLACK_WEBHOOK|g" /etc/docker/alertmanager/alertmanager.yml
      # apply the yml with the substituted value
    dest: /etc/alertmanager_config.sh
    mode: 0770
    owner: root
    group: docker

    
- name: Configure alert manager webhook - sed
  become: true
  shell: sed -i -e 's/\r$//' /etc/alertmanager_config.sh


- name: Run alert manager config
  become: true
  shell: /etc/alertmanager_config.sh

- name: Remove file the file as it isn't needed on the host
  file:
    path: /etc/alertmanager_config.sh
    state: absent
  